// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum
enum TypeOfScore {
  oral
  fifteenmintest
  minitest
  final
}

enum Conduct {
  Excellent
  Good
  Average
  Poor
  Bad
}

enum AttendanceStatus {
  present
  absent
  late
  leave
}

enum AccountStatus {
  ACTIVE
  INACTIVE
  PENDING
}

// Models
model User {
  id                     String    @id @default(uuid())
  name                   String?
  email                  String?
  phone                  String?
  birthday               DateTime?
  address                String?
  class                  String
  grade                  String
  holyname               String?
  fathername             String?
  fatherphone            String?
  mothername             String?
  motherphone            String?
  baptismplace           String?
  baptismdate            DateTime?
  role                   String
  role_id                String
  title                  String?
  isActive               Boolean?
  lastlogin              DateTime?
  created_at             DateTime? @default(now())
  updated_at             DateTime? @updatedAt
  created_by             String?
  updated_by             String?
  firstCommunionDate     DateTime?
  firstCommunionPlace    String?
  confirmationDate       DateTime?
  confirmationPlace      String?
  professionOfFaithDate  DateTime?
  professionOfFaithPlace String?
  catechistLevel         String?
  avatar                 String?

  // Relations
  userRoles   UserRole[]
  scores      Score[]
  attendance  Attendance[]
  discipline  Discipline[]
  transcripts Transcript[]
  classusers  Classuser[]
  // Quan hệ 1:1 với Account
  account     Account?     @relation("UserAccount")
}

model Account {
  id           String        @id @default(uuid())
  userId       String        @unique
  email        String        @unique
  passwordHash String
  status       AccountStatus
  lastLogin    DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // Quan hệ với User
  user User @relation("UserAccount", fields: [userId], references: [id], onDelete: Cascade)
}

model Score {
  score_id      String    @id @default(uuid())
  user_id       String
  subject_id    String
  semester_id   String
  score_type_id String
  score         Float?
  note          String?
  created_at    DateTime? @default(now())

  // Relations
  user      User      @relation(fields: [user_id], references: [id])
  subject   Subject   @relation(fields: [subject_id], references: [subject_id])
  semester  Semester  @relation(fields: [semester_id], references: [semesterid])
  scoreType ScoreType @relation(fields: [score_type_id], references: [score_type_id])
}

model ScoreType {
  score_type_id String      @id @default(uuid())
  type          TypeOfScore
  weight        Float?

  // Relations
  scores Score[]
}

model Subject {
  subject_id  String  @id @default(uuid())
  subjectname String?
  code        String?
  description String?

  // Relations
  scores        Score[]
  classSubjects ClassSubject[]
}

model Class {
  class_id  String @id @default(uuid())
  classname String
  grade_id  String

  // New columns
  created_at DateTime? @default(now())
  created_by String?
  updated_at DateTime? @updatedAt
  updated_by String?
  isactive   Boolean?  @default(true)

  // Relations
  classSubjects ClassSubject[]
  classusers    Classuser[]
  grade         Grade          @relation(fields: [grade_id], references: [grade_id])
}

model ClassSubject {
  class_subject_id String @id @default(uuid())
  class_id         String
  subject_id       String
  teacher_id       String

  // Relations
  class      Class        @relation(fields: [class_id], references: [class_id])
  subject    Subject      @relation(fields: [subject_id], references: [subject_id])
  discipline Discipline[]
  attendance Attendance[]
}

model Classuser {
  class_user_id String @id @default(uuid())
  class_id      String
  user_id       String

  // Relations
  class Class @relation(fields: [class_id], references: [class_id])
  user  User  @relation(fields: [user_id], references: [id])
}

model Attendance {
  attendance_id    String           @id @default(uuid())
  user_id          String
  class_subject_id String
  attendancedate   DateTime?
  status           AttendanceStatus
  note             String?
  created_at       DateTime?        @default(now())

  // Relations
  user         User         @relation(fields: [user_id], references: [id])
  classSubject ClassSubject @relation(fields: [class_subject_id], references: [class_subject_id])
}

model Semester {
  semesterid   String    @id @default(uuid())
  semestername String?
  year         Int?
  yearid       String
  note         String?
  created_at   DateTime? @default(now())

  // Relations
  schoolYear  SchoolYear   @relation(fields: [yearid], references: [schoolyearid])
  transcripts Transcript[]
  score       Score[]
}

model SchoolYear {
  schoolyearid String    @id @default(uuid())
  yearname     String?
  startdate    DateTime?
  enddate      DateTime?

  // Relations
  semesters Semester[]
}

model Transcript {
  transcript_id    String    @id @default(uuid())
  user_id          String
  semester_id      String
  gpa              Float?
  conduct          Conduct
  attendance_score Float?
  discipline_score Float?
  created_at       DateTime? @default(now())

  // Relations
  user     User     @relation(fields: [user_id], references: [id])
  semester Semester @relation(fields: [semester_id], references: [semesterid])
}

model Discipline {
  discipline_id    String    @id @default(uuid())
  user_id          String
  severity_id      String
  class_subject_id String
  date             DateTime?
  note             String?
  created_at       DateTime? @default(now())

  // Relations
  user         User               @relation(fields: [user_id], references: [id])
  severity     DisciplineSeverity @relation(fields: [severity_id], references: [severity_id])
  classSubject ClassSubject       @relation(fields: [class_subject_id], references: [class_subject_id])
}

model DisciplineSeverity {
  severity_id     String    @id @default(uuid())
  name            String?
  point_deduction Float?
  description     String?
  created_at      DateTime? @default(now())
  updated_at      DateTime? @updatedAt

  // Relations
  disciplines Discipline[]
}

model Role {
  roleid          String    @id @default(uuid())
  rolename        String?
  roledescription String?
  isactive        Boolean?
  created_at      DateTime? @default(now())
  updated_at      DateTime? @updatedAt

  // Renamed columns
  created_by String?
  updated_by String?

  // Relations
  userRoles UserRole[]
}

model UserRole {
  userroleid String @id @default(uuid())
  userid     String
  roleid     String

  // Relations
  user User @relation(fields: [userid], references: [id])
  role Role @relation(fields: [roleid], references: [roleid])
}

model Grade {
  grade_id         String    @id @default(uuid())
  gradename        String
  gradedescription String?
  isactive         Boolean?
  created_at       DateTime? @default(now())
  updated_at       DateTime? @updatedAt

  // Relations
  class Class[]
}
